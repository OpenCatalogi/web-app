{"version":3,"file":"component---src-pages-github-[md]-tsx-0ac3349a0ca594b64ae5.js","mappings":"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","sources":["webpack://skeleton-pip/./src/pages/github/[md].tsx","webpack://skeleton-pip/./node_modules/react-loading-skeleton/dist/index.js"],"sourcesContent":["import * as React from \"react\";\nimport qs from \"qs\";\nimport { PageProps } from \"gatsby\";\nimport { MarkdownContentTemplate } from \"../../templates/markdown/MarkdownContentTemplate\";\nimport { useGatsbyContext } from \"../../context/gatsby\";\nimport { useTranslation } from \"react-i18next\";\nimport { Page, PageContent } from \"@utrecht/component-library-react/dist/css-module\";\n\nconst MarkdownPage: React.FC<PageProps> = (props: PageProps) => {\n  const { t } = useTranslation();\n  const { location } = useGatsbyContext();\n\n  const url = location.search;\n  const [, params] = url.split(\"?\");\n  const parsedParams = qs.parse(params);\n  const link = parsedParams.link?.toString();\n\n  const detailPageSlug = props.params.detailPageSlug;\n  const pageSlug = props.params.pageSlug;\n\n  if (!link) {\n    return <span>{t(\"No markdown file found, make sure that the query param link is filled\")}</span>;\n  }\n\n  return (\n    <Page>\n      <PageContent>\n        <MarkdownContentTemplate {...{ pageSlug, detailPageSlug, link }} />\n      </PageContent>\n    </Page>\n  );\n};\n\nexport default MarkdownPage;\n","'use client';\nimport React from 'react';\n\n/**\n * @internal\n */\nconst SkeletonThemeContext = React.createContext({});\n\n/* eslint-disable react/no-array-index-key */\nconst defaultEnableAnimation = true;\n// For performance & cleanliness, don't add any inline styles unless we have to\nfunction styleOptionsToCssProperties({ baseColor, highlightColor, width, height, borderRadius, circle, direction, duration, enableAnimation = defaultEnableAnimation, }) {\n    const style = {};\n    if (direction === 'rtl')\n        style['--animation-direction'] = 'reverse';\n    if (typeof duration === 'number')\n        style['--animation-duration'] = `${duration}s`;\n    if (!enableAnimation)\n        style['--pseudo-element-display'] = 'none';\n    if (typeof width === 'string' || typeof width === 'number')\n        style.width = width;\n    if (typeof height === 'string' || typeof height === 'number')\n        style.height = height;\n    if (typeof borderRadius === 'string' || typeof borderRadius === 'number')\n        style.borderRadius = borderRadius;\n    if (circle)\n        style.borderRadius = '50%';\n    if (typeof baseColor !== 'undefined')\n        style['--base-color'] = baseColor;\n    if (typeof highlightColor !== 'undefined')\n        style['--highlight-color'] = highlightColor;\n    return style;\n}\nfunction Skeleton({ count = 1, wrapper: Wrapper, className: customClassName, containerClassName, containerTestId, circle = false, style: styleProp, ...originalPropsStyleOptions }) {\n    var _a, _b, _c;\n    const contextStyleOptions = React.useContext(SkeletonThemeContext);\n    const propsStyleOptions = { ...originalPropsStyleOptions };\n    // DO NOT overwrite style options from the context if `propsStyleOptions`\n    // has properties explicity set to undefined\n    for (const [key, value] of Object.entries(originalPropsStyleOptions)) {\n        if (typeof value === 'undefined') {\n            delete propsStyleOptions[key];\n        }\n    }\n    // Props take priority over context\n    const styleOptions = {\n        ...contextStyleOptions,\n        ...propsStyleOptions,\n        circle,\n    };\n    // `styleProp` has the least priority out of everything\n    const style = {\n        ...styleProp,\n        ...styleOptionsToCssProperties(styleOptions),\n    };\n    let className = 'react-loading-skeleton';\n    if (customClassName)\n        className += ` ${customClassName}`;\n    const inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n    const elements = [];\n    const countCeil = Math.ceil(count);\n    for (let i = 0; i < countCeil; i++) {\n        let thisStyle = style;\n        if (countCeil > count && i === countCeil - 1) {\n            // count is not an integer and we've reached the last iteration of\n            // the loop, so add a \"fractional\" skeleton.\n            //\n            // For example, if count is 3.5, we've already added 3 full\n            // skeletons, so now we add one more skeleton that is 0.5 times the\n            // original width.\n            const width = (_b = thisStyle.width) !== null && _b !== void 0 ? _b : '100%'; // 100% is the default since that's what's in the CSS\n            const fractionalPart = count % 1;\n            const fractionalWidth = typeof width === 'number'\n                ? width * fractionalPart\n                : `calc(${width} * ${fractionalPart})`;\n            thisStyle = { ...thisStyle, width: fractionalWidth };\n        }\n        const skeletonSpan = (React.createElement(\"span\", { className: className, style: thisStyle, key: i }, \"\\u200C\"));\n        if (inline) {\n            elements.push(skeletonSpan);\n        }\n        else {\n            // Without the <br />, the skeleton lines will all run together if\n            // `width` is specified\n            elements.push(React.createElement(React.Fragment, { key: i },\n                skeletonSpan,\n                React.createElement(\"br\", null)));\n        }\n    }\n    return (React.createElement(\"span\", { className: containerClassName, \"data-testid\": containerTestId, \"aria-live\": \"polite\", \"aria-busy\": (_c = styleOptions.enableAnimation) !== null && _c !== void 0 ? _c : defaultEnableAnimation }, Wrapper\n        ? elements.map((el, i) => React.createElement(Wrapper, { key: i }, el))\n        : elements));\n}\n\nfunction SkeletonTheme({ children, ...styleOptions }) {\n    return (React.createElement(SkeletonThemeContext.Provider, { value: styleOptions }, children));\n}\n\nexport { SkeletonTheme, Skeleton as default };\n"],"names":["props","_parsedParams$link","t","useTranslation","location","useGatsbyContext","url","search","params","split","link","qs","toString","detailPageSlug","pageSlug","_jsx","Page","children","PageContent","MarkdownContentTemplate","SkeletonThemeContext","defaultEnableAnimation","styleOptionsToCssProperties","baseColor","highlightColor","width","height","borderRadius","circle","direction","duration","enableAnimation","style","Skeleton","count","wrapper","Wrapper","className","customClassName","containerClassName","containerTestId","styleProp","originalPropsStyleOptions","_a","_b","_c","contextStyleOptions","propsStyleOptions","key","value","Object","entries","styleOptions","inline","elements","countCeil","Math","ceil","i","thisStyle","fractionalPart","fractionalWidth","skeletonSpan","push","map","el"],"sourceRoot":""}